package ${package.ServiceImpl};
##实体名，首字母大写
#set($EntityName = ${entity.replace('PO','')})
##实体名，首字母小写
#set($entityName = "${EntityName.substring(0,1).toLowerCase()}${EntityName.substring(1)}")
##VO的包路径
#set($packageVOName = ${package.Entity.replace('.po','.vo')})

import ${package.Entity}.${entity};
import ${packageVOName}.${EntityName}VO;
import ${package.Entity.replace('.domain.po','.enums')}.DeleteFlagEnum;
import ${package.Entity.replace('.domain.po','.enums')}.EnableFlagEnum;
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import RepCodeEnum;
import RequestModel;
import ResponseModel;
import BeanUtils;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${superServiceImplClassPackage};
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;

/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author anji gaea teams
 * @since ${date}
 */
@Service
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Autowired
    private ${EntityName}Mapper ${entityName}Mapper;

    /** 根据数据库必填项，校验是否为空，不校验主键
     * @param ${entityName}VO
     * @return
     */
    private ResponseModel validateCreateFieldNotNull(${EntityName}VO ${entityName}VO){
        if(${entityName}VO == null){
            return RepCodeEnum.NULL_ERROR.parseError("requestModel data");
        }
        /* 该片段由生成器产生，请根据实际情况修改
#foreach($field in ${table.fields})
#if("${field.columnType.getType().toLowerCase()}"=="string")
        if(StringUtils.isBlank(${entityName}VO.get${field.getCapitalName()}())){
            return RepCodeEnum.NULL_ERROR.parseError("${field.propertyName}");
        }
#else
        if(${entityName}VO.get${field.getCapitalName()}() == null){
            return RepCodeEnum.NULL_ERROR.parseError("${field.propertyName}");
        }
#end
#end
        */
        return ResponseModel.success();
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ResponseModel create(RequestModel<${EntityName}VO> requestModel) {
        //参数校验
        ${EntityName}VO ${entityName}VO = requestModel.getData();
        ResponseModel valid = validateCreateFieldNotNull(${entityName}VO);
        if(valid.isError()){
            return valid;
        }
        //业务校验
        //...todo

        //业务处理
        String operator = requestModel.getOpUserName();
        if(${entityName}VO.getEnableFlag()==null){
            ${entityName}VO.setEnableFlag(EnableFlagEnum.ENABLE.getCodeValue());
        }
        ${entityName}VO.setDeleteFlag(DeleteFlagEnum.UNDELETED.getCodeValue());
        ${entityName}VO.setCreatedBy(operator);
        ${entityName}VO.setCreatedTime(LocalDateTime.now());
        ${entityName}VO.setUpdatedBy(operator);
        ${entityName}VO.setUpdatedTime(LocalDateTime.now());

        ${EntityName}PO ${entityName}PO = new ${EntityName}PO();
        BeanUtils.copyProperties(${entityName}VO, ${entityName}PO);
        boolean flag = save(${entityName}PO);

        //返回结果
        if(flag){
            return ResponseModel.success(${entityName}PO);
        }else{
            return ResponseModel.fail(RepCodeEnum.FAIL);
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ResponseModel updateById(RequestModel<${EntityName}VO> requestModel) {
        //参数校验
        ${EntityName}VO ${entityName}VO = requestModel.getData();
        if(${entityName}VO == null){
            return RepCodeEnum.NULL_ERROR.parseError("requestModel data");
        }
        Long ${entityName}Id = ${entityName}VO.get${EntityName}Id();
        if(${entityName}Id == null){
            return RepCodeEnum.NULL_ERROR.parseError("${entityName}Id");
        }
        //业务校验
        //...todo

        //业务处理
        ${EntityName}PO ${entityName}PO = getById(${entityName}Id);
        if(${entityName}PO == null){
            return RepCodeEnum.NOT_EXIST_ERROR.parseError("${entityName}Id="+${entityName}Id.longValue());
        }
        String operator = requestModel.getOpUserName();
        ${entityName}VO.setUpdatedBy(operator);
        ${entityName}VO.setUpdatedTime(LocalDateTime.now());
        BeanUtils.copyProperties(${entityName}VO, ${entityName}PO, true);
        boolean flag = updateById(${entityName}PO);

        //返回结果
        if(flag){
            return ResponseModel.success(${entityName}PO);
        }else{
            return ResponseModel.fail("修改失败");
        }
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public ResponseModel deleteById(RequestModel<${EntityName}VO> requestModel) {
        //参数校验
        ${EntityName}VO ${entityName}VO = requestModel.getData();
        if(${entityName}VO == null){
            return RepCodeEnum.NULL_ERROR.parseError("requestModel data");
        }
        Long ${entityName}Id = ${entityName}VO.get${EntityName}Id();
        if(${entityName}Id == null){
            return RepCodeEnum.NULL_ERROR.parseError("${entityName}Id");
        }

        //业务处理
        ${EntityName}PO ${entityName}PO = getById(${entityName}Id);
        if(${entityName}PO == null){
            return RepCodeEnum.NOT_EXIST_ERROR.parseError("${entityName}Id="+${entityName}Id.longValue());
        }
        boolean flag = removeById(${entityName}Id);

        //返回结果
        if(flag){
            return ResponseModel.success("删除成功");
        }else{
            return ResponseModel.fail("删除失败");
        }
    }

    @Override
    public ResponseModel queryById(RequestModel<${EntityName}VO> requestModel) {
        //参数校验
        ${EntityName}VO ${entityName}VO = requestModel.getData();
        if(${entityName}VO == null){
            return RepCodeEnum.NULL_ERROR.parseError("requestModel data");
        }
        Long ${entityName}Id = ${entityName}VO.get${EntityName}Id();
        if(${entityName}Id == null){
            return RepCodeEnum.NULL_ERROR.parseError("${entityName}Id");
        }

        //业务处理
        ${EntityName}PO ${entityName}PO = getById(${entityName}Id);
        if(${entityName}PO == null){
            return RepCodeEnum.NOT_EXIST_ERROR.parseError("${entityName}Id="+${entityName}Id.longValue());
        }

        //返回结果
        BeanUtils.copyProperties(${entityName}PO, ${entityName}VO);
        return ResponseModel.success(${entityName}VO);
    }

    @Override
    public ResponseModel queryByPage(RequestModel<${EntityName}VO> requestModel) {
        //参数校验
        ${EntityName}VO ${entityName}VO = requestModel.getData();
        if(${entityName}VO == null){
            return RepCodeEnum.NULL_ERROR.parseError("requestModel data");
        }
        //...todo

        //分页参数
        Page<${EntityName}VO> page = new Page<${EntityName}VO>(requestModel.getCurrentPage(), requestModel.getPageSize());
        ${entityName}VO.setDeleteFlag(DeleteFlagEnum.UNDELETED.getCodeValue());

        //业务处理
        IPage<${EntityName}VO> pageList = ${entityName}Mapper.queryByPage(page, ${entityName}VO);

        //返回结果
        return ResponseModel.success(pageList);
    }
}
#end
